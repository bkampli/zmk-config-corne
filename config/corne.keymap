/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */
// Customizations

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

/ {
    combos {
        compatible = "zmk,combos";

        Esc {
            bindings = <&kp ESC>;
            key-positions = <2 3>;
            layers = <0>;
        };

        Tab {
            bindings = <&kp TAB>;
            key-positions = <14 15>;
            layers = <0>;
        };

        bt_clr_profile {
            bindings = <&bt BT_CLR>;
            key-positions = <5 6>;
            layers = <3>;
        };

        Caps_Lock {
            bindings = <&kt CAPS>;
            key-positions = <25 26>;
            layers = <0>;
        };

        Repeat {
            bindings = <&key_repeat>;
            key-positions = <38 39>;
            layers = <0>;
        };

        Delete {
            bindings = <&kp DEL>;
            key-positions = <9 8>;
            layers = <0 1 2 3>;
        };

        USB_Output {
            bindings = <&out OUT_USB>;
            key-positions = <17 18>;
            layers = <3>;
        };

        BLE_Output {
            bindings = <&out OUT_BLE>;
            key-positions = <29 30>;
            layers = <3>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
&none  &kp Q  &kp W  &kp F  &kp P         &kp B        &kp J      &kp L           &kp U            &kp Y                &kp BACKSPACE  &none
&none  &kp A  &kp R  &kp S  &kp T         &kp G        &kp M      &kp N           &kp E            &kp I                &kp O          &none
&none  &kp Z  &kp X  &kp C  &kp D         &kp V        &kp K      &kp H           &mt LCTRL COMMA  &mt LEFT_ALT PERIOD  &kp RET        &none
                     &mo 1  &kp LEFT_GUI  &kp SPACE    &kp SPACE  &kp LEFT_SHIFT  &mo 2
            >;
        };

        left {
            bindings = <
&none  &kp INS          &kp HOME  &kp UP    &kp END    &kp PAGE_UP      &kp N7  &kp N8  &kp N9  &kp N0   &trans  &none
&none  &kp PRINTSCREEN  &kp LEFT  &kp DOWN  &kp RIGHT  &kp PAGE_DOWN    &kp N4  &kp N5  &kp N6  &none    &none   &none
&none  &none            &none     &none     &kp LCTRL  &kp LEFT_ALT     &kp N1  &kp N2  &kp N3  &kp DOT  &trans  &none
                                  &trans    &trans     &trans           &trans  &trans  &trans
            >;
        };

        right {
            bindings = <
&none  &kp TILDE2  &kp UNDER      &kp PLUS   &kp LEFT_BRACE    &kp RIGHT_BRACE      &kp AMPS    &kp ASTRK       &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp GRAVE  &none
&none  &kp GRAVE   &kp MINUS      &kp EQUAL  &kp LEFT_BRACKET  &kp RIGHT_BRACKET    &kp DOLLAR  &kp PERCENT     &kp CARET             &kp QUESTION           &kp COLON  &none
&none  &kp PIPE    &kp BACKSLASH  &none      &kp SINGLE_QUOTE  &kp DOUBLE_QUOTES    &kp EXCL    &kp AT          &kp HASH              &kp SLASH              &kp SEMI   &none
                                  &trans     &kp LCTRL         &trans               &trans      &kp LEFT_SHIFT  &trans
            >;
        };

        middle {
            bindings = <
&none  &bt BT_SEL 0   &bt BT_SEL 1   &bt BT_SEL 2    &bt BT_SEL 3   &bt BT_SEL 4     &kp F7  &kp F8  &kp F9  &kp F10  &none  &none
&none  &bt BT_DISC 0  &bt BT_DISC 1  &bt BT_DISC 2   &bt BT_DISC 3  &bt BT_DISC 4    &kp F4  &kp F5  &kp F6  &kp F11  &none  &none
&none  &none          &none          &kp LEFT_SHIFT  &kp LCTRL      &kp LEFT_ALT     &kp F1  &kp F2  &kp F3  &kp F12  &none  &none
                                     &trans          &none          &trans           &trans  &none   &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        layer3_condition {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
