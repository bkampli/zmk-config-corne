/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        Esc {
            bindings = <&kp ESC>;
            key-positions = <0 1>;
        };

        Tab {
            bindings = <&kp TAB>;
            key-positions = <12 13>;
        };

        Delete {
            bindings = <&kp DELETE>;
            key-positions = <10 11>;
        };

        atl_ctrl_del {
            bindings = <&kp LA(LC(DELETE))>;
            key-positions = <33 22>;
            layers = <2>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&none  &kp Q  &kp W  &kp E  &kp R               &kp T            &kp Y      &kp U                   &kp I      &kp O    &kp P            &none
&none  &kp A  &kp S  &kp D  &kp F               &kp G            &kp H      &kp J                   &kp K      &kp L    &kp RIGHT_SHIFT  &none
&none  &kp Z  &kp X  &kp C  &kp V               &kp B            &kp N      &kp M                   &kp COMMA  &kp DOT  &kp RET          &none
                     &mo 1  &mt LCTRL LEFT_GUI  &kp BACKSPACE    &kp SPACE  &mt LEFT_ALT RIGHT_GUI  &mo 2
            >;
        };

        layer1 {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&none  &trans    &kp UP_ARROW  &trans     &trans  &trans           &kp N7     &kp N8  &kp N9  &kp MINUS  &trans   &none
&none  &kp LEFT  &kp DOWN      &kp RIGHT  &trans  &trans           &kp N4     &kp N5  &kp N6  &kp EQUAL  &trans   &none
&none  &trans    &trans        &trans     &trans  &trans           &kp N1     &kp N2  &kp N3  &kp DOT    &kp RET  &none
                               &none      &trans  &kp BACKSPACE    &kp SPACE  &kp N0  &mo 3
            >;
        };

        layer2 {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&none  &kp EXCL      &kp AT        &kp HASH      &kp DLLR      &kp PRCNT        &kp CARET  &kp AMPS   &kp KP_MULTIPLY  &kp LPAR  &kp RPAR  &none
&none  &bt BT_CLR    &trans        &trans        &trans        &trans           &kp MINUS  &kp EQUAL  &kp LBKT         &kp RBKT  &kp BSLH  &none
&none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4     &kp UNDER  &kp PLUS   &kp LBRC         &kp RBRC  &kp RET   &none
                                   &trans        &trans        &kp BACKSPACE    &kp SPACE  &trans     &none
            >;
        };

        layer3 {
            bindings = <
&none  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &none
&none  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &none
&none  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &none
                       &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };
    };
};
